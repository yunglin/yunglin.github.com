<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[碎碎唸]]></title>
  <link href="http://blog.yunglinho.com/atom.xml" rel="self"/>
  <link href="http://blog.yunglinho.com/"/>
  <updated>2014-03-26T21:41:06+08:00</updated>
  <id>http://blog.yunglinho.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[典範]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/03/26/role-model/"/>
    <updated>2014-03-26T21:31:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/03/26/role-model</id>
    <content type="html"><![CDATA[<p>這篇寫的真好，在國外渡過我二十歲的歲月，三十歲回到台灣來，發覺，台灣人最缺的就是一個典範跟一個夢想。</p>

<p>台灣的年輕人活的很沒未來，常做一些很短期的事，像是一年換一次手機，一年就出國一次去玩，工作收入有個四五萬一個月好像就很滿足了。</p>

<p>這些，我不會去怪這些年輕人，因為台灣這個社會讓年輕人沒有了夢想，把手機的錢存下來又怎樣，什麼都還是買不起，買車買房都無望，還是今朝有酒今朝醉吧，比別人多努力兩成又怎樣，生活又不會過比較好，反而還比較慘。</p>

<p>我在美國單身的歲月裡，一年可以存下一半的薪水，工作了兩三年後，存下的錢在考慮要怎麼花，看是現金買部BMW M3圓夢、買個公寓省下房租、或投資做生意中做選擇，生活是一日比一日好。</p>

<p>回來台灣後發現，台灣年輕人最缺的，其實是生命上的導師、一個可以遵從的典範，一個長你十多歲，一個你一直努力，就可以達到他的境界的目標。</p>

<p>Ronald 是1.5代移民的香港人 30 歲幹到了 Director of Engineering ，Mak是日裔第一代移民 X-Window 中有他的名字，雖然英語不是他的母語，還是帶了 80 人，後來還跑去做了 Sims 3 ，Maidu 聯合國科學家的兒子，19歲大學畢業，30歲初頭時在兩年內在印度開了家公司，在舊金山生了小孩，還在 U of Chicago 拿 MBA，Stu 超級技術強人，幫我開了一輩子的眼界。</p>

<p>這些人是我工作的同事，長我五到十歲，讓我知道，只要有目標，忍耐得了寂默苦修，有一天我也可以達到他們的境界。</p>

<p>但是台灣的年輕人就沒什麼典範可以學習了，電視雜誌上報導的，多是六七十歲的大老，要不然就是官二代富二代；看這些人的故事，怎麼看都沒什麼好學的，反正再怎麼努力，你爺爺也不會變成姓蔣的，你無法去複製他們的成功經驗。</p>

<p>台灣因為市場結構問題，要打入既有商業體系的，都只能靠「關係」，我這幾年下來，碰上創業成功的，多是做吃的，因為只有做吃的不用靠關係可以直接面對市場。或許就是這樣吧，年輕人就只能學著當個好寶寶，等著接收長輩的蔽蔭。</p>

<p>所以看到陳為廷和林飛帆能幫年輕人立個典範，告訴大家，年輕人還是能改變社會，讓我非常的感動。</p>

<div id="fb-root"></div>


<p> <script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script></p>

<div class="fb-post" data-href="https://www.facebook.com/nai.lai.12/posts/10200710575647101" data-width="466"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/nai.lai.12/posts/10200710575647101">Post</a> by <a href="https://www.facebook.com/nai.lai.12">蔡坤霖</a>.</div></div>


<blockquote><p>   蔡坤霖</p>

<p>   以下是我的立場。</p>

<p>   其實這樣寫很奇怪，為什麼會有人關心我的立場？不過既然臉書是私媒體，我不是公眾人物，也沒領稿費，那就當書寫為自瀆吧。</p>

<p>   我首先要懺悔：從2012以後，我就是個心存逃避的失敗主義者。馬英九上台，我認為，台灣人民已經做了選擇，那就是統一。</p>

<p>   既然要統一了，那我心態上可以提早做準備。我尊重台灣的民意，因此也沒想要多反映什麼，只想，啊，以後就當個共產黨治下的民眾吧。反正，我喜歡的東西是類型，如武俠、玄幻之類古代背景，沒有要談什麼高深的東西。</p>

<p>   但我內心其實相信，台灣不統一比較好。台灣之所以重要是因為它不是中國的一份子，如果它是中國的一份子，那台灣就不特別了。</p>

<p>   這句話很難簡單說明，但從對自己的經濟天賦失望之後，我就轉而將熱情投諸在不能量化的事物上。台灣保有獨立的主權，等於是為華人的政治實踐多了一所學校，畢竟華人作為地球上最龐大的民族，只有這個小小的島是民主的，只有這個小小的島，能夠提供集權之外的另一種可能。</p>

<p>   想像需要典範，對現在以及未來的華人而言，台灣就可以是那個典範，前提是台灣值得成為典範。</p>

<p>   既然台灣不願意成為這個特例，想要跟中國其他數十個省份一樣，那我接受台灣人民的選擇，所以我不再思考這件事情，只想著如果可以掌握好中國古代背景的類型電影，未來在華人市場應該都有飯吃。</p>

<p>   政治與文化的多樣性，台灣可以為華人保存這一小小的孤島。可不可以把台灣像是太平洋上物種歧異度高的一個小島一樣保存下來，進行一點政治體制上的一點研究呢？我在選舉前是這樣想的。</p>

<p>   這裡要先說兩點，我認為2012馬英九上台等於統一，和我認為統一之後台灣主體性會消失，並且成為文化上、思想上毫無特色的一個省份，這兩點是近乎宗教的信念，不在此論證由何而來。信者自信，疑者自疑，到處找找有很多說法、很多推測，但尚未發生，所以我沒有證據。</p>

<p>   在我心中，台灣如同雅典，雖小，卻體現著罕見而且影響深遠的故事。如同余英時所說：「台灣雖小，但其實它大極了。」</p>

<p>   等到未來某個世代的華人決定推翻共產黨時，他們知道他們可以看向哪裡。他們有機會知道，所謂華人不需要民主，是一個被兩千三百萬人證偽的謊言。</p>

<p>   然後台灣的民意放棄這件事情了，在2012年，689萬票這樣說。那就算了吧，何必思考呢？再說一次，這是我主觀如同宗教般的解讀，沒有任何依據。</p>

<p>   所以大埔，文林苑，我認為都更雖然執行粗糙，但有其必要性；核四，雖然粗糙，但確實能減碳，也高效率，很多議題我都覺得算了。幹麼想這些呢？有那麼多人不在乎政府違憲（是的，我先天上就覺得職業學生出身的馬英九從來沒在乎過憲法），反正遲早就要習慣沒有憲法的生活了不是嗎？</p>

<p>   到時候那些可以扭轉歷史的40萬人再來後悔吧，我從來沒投過馬英九，我可沒什麼好後悔，是被拖下水的。</p>

<p>   失敗主義、犬儒主義，自作聰明，未戰先退。我很懦弱。我不覺得我可以也必須抵抗689萬票，也不覺得有可能對抗13億。怎麼可能呢？世界上人口最多，最霸道，離我們最近的國家。</p>

<p>   吐口水就淹死我們了，拔根毛就脹死我們了。想想怎麼過得好吧，不要太激憤，不然，很可能到時候統一時，會死一票人。</p>

<p>   改朝換代，不都要血流成河？我們還看得少嗎？</p>

<p>   服貿只是歷史巨輪下的一個小齒輪。之前很多事情，台灣人不吭聲，是的，包括鄭秀玲教授的那些文字，一點屁聲都沒激起，台灣人沒有資格擁有民主，那就順勢而行吧。之後很多事情，也不會吭聲。</p>

<p>   到時候，就閉嘴，蘇軾不是說過了嗎？</p>

<p>   「夫持法太急者，其鋒不可犯；而其勢未可乘。」</p>

<p>   我是個聰明人，蒙田是我的偶像。蘇格拉底拿來意淫就好，不用仿效。</p>

<p>   但是我看到，陳為廷和林飛帆，居然能在馬王政爭時攻下立法院！</p>

<p>   我想都沒想過！居然還有這招？怎麼還有這樣的招數？從來沒有人攻打立法院呀！為什麼立法院居然可以被攻下來，而且還有人想到要去打下它？而且打下它之後，王金平居然真的不趕走他們？</p>

<p>   天哪，還有這一招！我嚇傻了。從沒想過鬥爭、反抗，以為選票就是一切的我被嚇傻了。我以為一切都已經注定好了，提早投降了。他們在實踐中獲得了我想像力之外的智慧與勇氣。我不覺得他們就比我聰明，書就讀得比我好，但他們年紀比我小，用這麼簡單、異想天開的方式，就告訴了全台灣，告訴了全世界。</p>

<p>   我不服，我有話要說，我想說的是，公民不服從。</p>

<p>   我知道公民不服從，我讀過梭羅，我知道甘地、曼德拉。但剛剛說過，想像需要典範，這兩個年輕人給我了典範，讓我敢想像。然後我發現，我還沒有年輕過，就已經老了。我在沒有天真前，就先世故了，我在還沒思考作戰前，我就先規劃好投降了。</p>

<p>   那之前，我以為人生最好是去美國，然後是去中國，離開台灣，離開被自己人放棄主權的悲情島嶼。我好懦弱。</p>

<p>   台灣，這個小小的島嶼，從以前就是強權間的遊戲，未來也一直都會是。當中國和平崛起，美國重新調整戰略思維，台灣民意悶不吭聲，我知道，事就這樣成了。</p>

<p>   我想像的台灣價值會被一個文革之後失去靈魂的國族吞吃乾淨，文革的火燒乾了中國的血性與道德，焦土之上只剩下消費主義的荊棘可以怒放，然後很快輪到台灣。</p>

<p>   但陳為廷和林飛帆讓我知道，事情還有可轉圜的餘地，大聲讓世界知道，我們不服從。畢竟，這句話這天不說，很快就不能說了。</p>

<p>   我一向很懦弱，所以我逃避思考，逃避現實，在故事的世界裡面永遠找得到避風港。我以為這樣我就不用害怕。</p>

<p>   但這時候我才知道我真正害怕什麼。</p>

<p>   我害怕，未來有一雙澄澈的眼睛，看著我，問我說當台灣被統一的時候，我做了什麼。</p>

<p>   我知道，我不能聳聳肩，冷笑說：「我怎麼知道，你老子我沒投過國民黨，那不關我的事。」</p>

<p>   那關我的事。</p>

<p>   高牆與雞蛋之間，雞蛋不可能贏。</p>

<p>   但人活著，要有骨氣。不可以什麼都還沒做，就先認輸。</p>

<p>   膝蓋還沒好，不能跑、不能久站、不能盤腿坐太久。那找兩天睡在外面吧，未來我可以告訴我的小孩，我那天晚上，看到的夜空很美，很年輕。</p>

<p>   最後，我還可以跟我孩子吹噓：「你老爸年輕時超會考試，考上了台大，那裡有個校長叫傅斯年；死過很多人，其中一個人是陳文成；那裡發生過哲學系事件。出過很多敗類，但也發生一些值得記住的事情。還是有些值得驕傲的地方。」</p>

<p>   我以身為台灣人為榮，我以身為台大人為榮。</p>

<p>   2014/03/25</p>

<p>   最後，請讓我打上這行超過四年沒有寫的頭銜：</p>

<p>   B93 台大經濟 蔡坤霖
   獻給B91鄧之皓</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[從立法院長王金平談遵守法定程序]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/03/22/wang-jin-pyng/"/>
    <updated>2014-03-22T23:02:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/03/22/wang-jin-pyng</id>
    <content type="html"><![CDATA[<h1>紙牌屋</h1>

<p>王金平果然是老狐狸，什麼政爭，有他就好看了許多，似乎全中華民國政界講法律的就只有他一人而已。</p>

<p>先是學生佔領國會，行政單位用「國會自主」說國會殿堂歸立法院管，只有院長才可以動用警察權讓警察進入。</p>

<p>王金平就用非開議期間的佔領，是單純行政問題，請行政單位自行處理。</p>

<p>昨日總統要召開府院會議，調停行政跟立法的紛爭。</p>

<p>王金平說，審法條是立院自己的事，跟行政單位無關，沒什麼糾紛，拒絕出席。</p>

<p>今天行政院長跟學生會面，說考慮要逐條審察。</p>

<p>王金平又說，行政院提的解決方案跟立法程序不合。此外，怎麼審是立法單位的事，不容行政單位插嘴。行政單位有問題的，可以自己撤案，從頭再來一次。</p>

<p>這場戲，真的沒王金平不行啊，好好的幫台灣民眾上了一課什麼叫行政、立法、司法三權分立。</p>

<p>而且直把箭頭指准國民黨主席馬英九，因為只有國民黨主席可以要求立委撤回服貿的同意案。</p>

<h1>我想當好人</h1>

<p>王金平是不是(道德上)的好人我不知道，至少就很多中華文化的標準來看，他不是個好人。但是就法律上來說，他是個守法的好公民，也幫我們守住了法治社會的底限。</p>

<p>在學生佔領立法院的初期，有些人是期望王金平以立法院長的身份，去主張「國會自主權」並且同時不使用「警察權」去趨離學生的。</p>

<p>就此標準來看，王金平不保護學生，是道德上的壞人，但是，因為他什麼都就法律來主張自己的看法，反而讓學生運動有了更強的理論基礎、正當性。</p>

<p>學生運動本來是要求「行政單位跟立法單位要就法定程序來審服貿法案」。</p>

<p><del>但當學生要求跟總統對話時，總統派出了行政院長來對談，行政院長在自己職權外答應了一些事，我新聞沒看很清楚，印像是學生並沒有嚴詞拒決了行政院長的提案。</del></p>

<p><del>這時，學生已自己都踩了自己定下紅線而不自知，好險有王金平這老狐貍在旁，暗助了學生一把，說了行政院長所提的解決方案與法律不合，把大家的攻防，又拉回了「行政單位跟立法單位要就法定程序來審服貿法案」</del></p>

<blockquote><p>3/23 補注：剛看完了行政院長到現場的對談，原來行政院長當場什麼也沒答應，而學生也把底線抓的很好，
一直是都要求行政院就自己的職權來撤回法案。所以王金平只是補一刀而已</p></blockquote>

<h1>野蠻時代</h1>

<p>為什麼我們要看議事規範、要去就法律攻防，因為我們要避免回到今天的狀況，避免回到野蠻時代。</p>

<p>兩百年前，法國國會是議員有爭論，就是拔劍決鬥，但人家還是走過了那個階段，現在都是就議事規範來較競，不是再用武力對決，所以人家國會會有那種一講二十個小時，就為了阻擾法案通過。野蠻嗎？總比拔劍決鬥文明多了。</p>

<p>今天為什麼服貿的審議會讓那麼多人走上街頭，就是因為我們的國會往回走到了野蠻時期，主席可以跑到廁所門口，獨自宣佈表決通過，如果這樣子人民都還可以忍受，下次就是睡夢中就通過，或者行政單位直接執行，事後再補程序就好。</p>

<p>這種事情若還能接受，那就離獨裁不遠了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消基會抽查預付卡100%違規設使用期限，NCC：將要求業者改善]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/03/15/prepaid-card-lifetime-limit/"/>
    <updated>2014-03-15T11:47:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/03/15/prepaid-card-lifetime-limit</id>
    <content type="html"><![CDATA[<p>這是鬧劇嗎？兩邊都是笑話。</p>

<p>電信公司給預付卡一個門號跟維持一個門號是有成本的，為什麼 NCC 可以要求業者要無限期的維持一個沒有使用中的門號，設使用期限或者是有每月低消本來就是很合理的事，中華民國政府的 &#8220;行政單位NCC&#8221; 竟然可笑的定了這種 &#8220;規定&#8221; 出來。</p>

<p>更可笑的是， NCC 自己定的 &#8220;規定&#8221; ，卻連自己都不去強制遵守，要求業者遵循規定。</p>

<p>「上下交相賊」，上個求個美名所以定個便民的規範，但是卻不去執行，把責任推給商家，真是好個「儒家社會」啊</p>

<blockquote><p>消基會抽查預付卡100%違規設使用期限，NCC：將要求業者改善
消基會抽查國內11件預付卡商品，發現100%都違反規定設有使用期限，應記載資訊也沒有完整詳細說明，NCC表示將進行查核，督促業者依規定落實改善。</p>

<p>文/蘇文彬 | 2014-03-14發表</p>

<p>消基會抽查11件電信預付卡商品，發現全部違反國內電信禮券定型化契約規定設定使用期限。</p>

<p>消基會調查電信業者推出的預付卡發現，預付卡雖然免綁約，且提供消費者控制通話費，但都訂有使用時間限制。對此NCC表示，電信儲值卡不應限制使用期限，將督促業者改善。</p>

<p>消基會這次一共抽查11件預付卡商品，其中7件為金額儲值型，4件為計量型上網儲值卡，並依據「電信商品或服務禮券定型化契約應記載及不得記載事項」不應限制用戶使用期限的規定，檢視抽查的預付卡服務內容說明是否有違反法律規定的情形。抽查的預付卡銷售商包括遠傳、台灣大哥大、中華電信、威寶、亞太、家樂福、7-Eleven等。</p>

<p>結果卻發現抽查的預付卡商品全部都設有使用期限，用戶每次儲值需在一定的時間內使用，業者通常限制為180天，上網儲值卡更只有30天，用戶在期限內再次儲值才能再展延180天或30天。</p>

<p>消基會指出，抽查的預付卡100%違反規定，並非消費者儲值後就能一直使用到儲值金額用完為止。一般購買禮券不因只消費部份金額，就被要求將剩餘金額在一定期限內消費完，但電信儲值卡卻有使用期限，除非再次儲值才能延後使用，但儲值金額用不完還要消費者再儲值才能繼續使用並不合理，且違反規定。</p>

<p>預付卡儲值金額若在時限內未使用完，部份電信業者可以申請退費，但部份業者規定只能辦理移轉，將預付卡內剩餘金額轉移到同一家業者月租費門號帳上，若用戶超過6個月沒有申辦轉移，剩餘儲值金額會保留，但會收取保管費直到扣完為止。</p>

<p>除了使用期限，消基會也發現其他資訊，例如業者名稱、地址、發售編號、履約保證、餘額處理方式、遣失處理等資訊在包裝或業者官網上說明不夠明確。</p>

<p>消基會表示，「電信商品或服務禮券定型化契約應記載及不得記載事項」在2007年通過，該年6月消基會首次抽查即100%違反規定設定用戶使用期限，今年再再次調查仍是100%違反規定，部份業者甚至規定屆期金額歸零，NCC應加強督導業者，消費者選擇儲值卡也應注意業者相關規定。</p>

<p>對於消基會抽查預付卡結果，NCC回應，依電信禮券定型化契約規定，逾期未使用完的傳輸量，用戶沒有特別聲明，應自動用以折抵通話費。消費者購買預付卡為不記名的禮券商品服務，依規定不得限制使用期限，NCC將會督促業者落實規定改善。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[從壓力測試回想到一些老故事]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/02/19/on-load-testing/"/>
    <updated>2014-02-19T00:55:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/02/19/on-load-testing</id>
    <content type="html"><![CDATA[<p>最近壓力測試因為 <a href="http://www.cna.com.tw/news/aipl/201402180446-1.aspx">戶政系統</a> 的原因，上了幾天的新聞，講到壓力測試，就想到我這輩子職場上的一個恥辱，把一個產品搞倒的紀錄。</p>

<p>2007 年我還在 Rhapsody.com 時，當時我是擔任我們 webservice api 的 QA Lead ，做一個有 40 個內外部客戶的服務的守門員，每一次的產品更新，都要我跑完了數萬個測試，說可以出貨了才可以出貨。</p>

<p>四月時忙完跟 Tivo 的合作案，把系統的負荷量測到及調整到可以服務 500萬線上用戶的量後，另一個團隊又開發了新的 social 網站。</p>

<p>那是 facebook 才上線三年，或者說才對外公開服務的第一年，當所有人都還不知道什麼是社交功能時，rhapsody就已經開發出來社交功能，可以互相推薦音樂清單、可以 follow 別人、還可以自定 avatar</p>

<p>在上線前，我問了我的主管的主管，需不需要對 social web 的上線做測試，當時大主管是說不用。沒想到一上線，這 social web 非常的熱門，一下子就有數萬個用戶從標準的頁面轉換到 social 版去，似乎，一個新的 killer app 就要產生了。</p>

<p>然而才上線兩三天，網站的速度就慢了下來，後來才知道，原來 social web 濫用了我們的一個 GET api ，我們的 GET api 允許一次抓多個 object ，結果 social web 一次一個 request 就抓了 500 object ，一個 object 4k 就好，一次就抓 2MB ，在加上 object serialization 中間所花的記憶體空間，一個 request 就要佔 6MB 以上，一下就把那個年代的 server 打垮了。</p>

<p>就這樣，這個 social web 就下線整修，但不知為什麼，就此沒有再上線過了&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb vs MySQL/RDBMS]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/02/12/mongodb-mysql/"/>
    <updated>2014-02-12T16:24:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/02/12/mongodb-mysql</id>
    <content type="html"><![CDATA[<p>許多人從 RDBMS 跳到 NoSQL 的第一站都是 MongoDB ，所以這一篇，就是特別寫來解釋，為什麼很多人選用 MongoDB ，以及解釋你為什麼不該用 MongoDB 來換掉 RDBMS 。</p>

<h2>MongoDB 熱門的理由</h2>

<p>MongoDB 熱門的原因是因為他提供了一個可以跟 SQL 相比的 <a href="http://docs.mongodb.org/manual/tutorial/query-documents/">Query Language</a> ，在 NoSQL 不同面向的眾多方案中， MongoDB 所能支援的 AdHoc Query 是沒人能比的， Riak 跟 CouchDB 的 AdHoc Query
也不差，但是 Riak 在跑 <a href="http://docs.basho.com/riak/latest/dev/using/mapreduce/">MapReduce Query</a> 時是不能透過 index 加速的， CouchDB 則是跟本不支援 index ，所以在這邊 MongoDB <strong>看似</strong> 是個很好的 MySQL drop-in replacement</p>

<p>使用 MongoDB 來取代 MySQL ，在初期，看來是學習成本最低，轉換風險最低的解決方案，所以多數商業公司，為了降低風險，在追循潮流一窩風的採用 NoSQL 時，選擇了 MongoDB 這個看似合理且安全的選項。</p>

<p>然而糖衣底下掩蓋的，卻是數不盡的陷井在那。</p>

<h2>Trade-Off</h2>

<p>技術的選用，往往是一連串的取捨，拿某樣功能去換回了另一項功能，所以，接下來我們就來看看，我們從 MySQL/RDBMS 跳到 MongoDB 去，我們到底是跟魔鬼做了什麼樣的交易，拿了什麼樣的東西，去換回了什麼。</p>

<p>首先，我們先看看我們換出去的是什麼？我們換出去的是 ACID (Atomicity, Consistency, Isolation, Durability) 及 Relational Model</p>

<h3>ACID</h3>

<p>對絕大多數的應用來說，交易的正確性跟不可否任性，是系統必要的基石， ACID 便是協助達成這一目標的工具之一。</p>

<p>ACID 雖然是一大重要工具，但也不是不能夠取代，像是 <a href="http://martinfowler.com/bliki/CQRS.html">CQRS Pattern</a> ， <a href="http://www.youtube.com/watch?v=BGxnjKd4MFQ">Cassandra Summit</a> 有一個很好的講題就是介紹怎麼用 Cassandra 透過 CQRS 來寫一個給銀行用的轉帳系統。</p>

<p><a href="http://msdn.microsoft.com/en-us/library/jj591569.aspx">SAGA Pattern</a> 則是另一個在沒有 Transaction 下，來解決多事件互動的 Pattern 。</p>

<p>然而 CQRS 或 SAGA Pattern 都沒有 Transaction 好用，以及廣被眾人所了解，連我自己都只是讀過沒有親身實作過，要做的話，連底層的工具都要自己從頭開始作，或者是要去學一些非常新的工具如 <a href="http://www.datomic.com/">Datomic</a> 。</p>

<p>因為換出的是 ACID 這樣強大的工具，替代的方案又是高未知的空間，所以許多人最後選擇的替代方案就是 &#8211; <strong>頭埋起來假裝沒有問題</strong></p>

<p>而且 MongoDB 本身號稱的 BASE 跟本是 Eventual Inconsistency ，在
<a href="http://aphyr.com/posts/284-call-me-maybe-mongodb">Call me maybe: MongoDB</a> 這篇文章中就驗證到，當 Network Partition 發生時，既使 MongoDB
回復寫入成功，但是實際上還是會失敗的，所以就在這種底層實作不可靠下，你上層加什麼工具也是枉然，所以多數人就是假裝沒這回事，想說自己沒這麼倒楣。</p>

<h3>Relational Model</h3>

<p>Relational Model 是三十年前那次 DB 戰爭中，打敗 Network Model, Hierarchical Model 剩出的王者，在三十年後，再次受到 Document Model 的挑戰，這次的結果如何呢？</p>

<p>Relational Model 的好處是可以透過正規化，減少資料的重複、提高資料的一致性，以及透過
SQL ，除了 AdHoc Query 外，還可以對多個 Table 進行 Joined Query，這個是 MongoDB / Document Model 所做不到的。</p>

<p>那這個特性重要嗎？我想透過一個例子就可以很簡單的介紹 Relational Model 的強大，跟 Document Model 在應用上會碰到的問題。</p>

<h4>Relational Model Example</h4>

<p>我們公司是做人肉搜索的，對於同一個人 / email 來說，我們會有很多來自不同來源的 metadata ，今天假設是兩個來源好了。</p>

<p>在 RDBMS 中，就是開兩個 Table ，各自記錄不同來源來的資料</p>

<pre><code>| TableA        | Email         | likes      |
| ------------- |---------------| -----------|
|               | billg@ms.com  |  1600      |


| TableB        | Email         | tweets     |
| ------------- |---------------| -----------|
|               | billg@ms.com  |  9999      |
</code></pre>

<p>在 Document Model 可能就是用一個 Document 如</p>

<pre><code>{
    email: "billg@ms.com",
    likes: 1600,
    tweets: 9999
}
</code></pre>

<p>在 Query 時，前者要一個 join 才可以取回關於這個 email 的所有資料，後者則是一個 lookup ，自然後者的效率較好，而且同樣可以對不同的欄位下 Query 條件。</p>

<p>然而，既然要用 NoSQL 就要玩 <strong>BIG DATA</strong> ，所以我們把問題修改一下，我們從兩個來源，分別拿到十億筆
email 的 likes 數，跟十億筆 email 的 tweets 數，我們想把這些資料寫到 DB 去再拿回來用。</p>

<p>用 RDBMS 自然是輕鬆愉快，兩個檔案輪流打開，一筆筆的加到 DB 中，DBMS對這種簡單的寫入可以做到 10,000 insert / sec 沒問題，大概 55 分鐘就可以做完了。</p>

<p>但是 MongoDB 呢？因為兩個屬性都是在同一個 Document 上，所以要馬是先把十億筆 (email, likes) ，先寫到 MongoDB 中，再下十億筆 Read + Update 把 Document
讀回來再加上 tweets ，如果很不幸你的 Document Id 不是 email ，那就是要下十億筆 Search + Update ，不管怎麼算，都不是太漂亮。</p>

<p>另一個作法是，你先把兩個十億筆的資料在本機的記億體中做 join ，然後再寫到 MongoDB 去，ㄜ&#8230; 這樣搞你不覺得累嗎？這麼小的應用問題就要自己動手刻程式碼，而且
前面我們不是說 big data 嗎？如果資料不是十億筆而是一百億筆，你放不進記億體中，那你要先用 radix sort 寫到 file system 再讀回來嗎？</p>

<p>然後你忙了這麼多後， MongoDB 給你的，因為 global write lock ，還是一樣是 10,000 insert /sec ，然後因為 MongoDB 實作的問題，如果你的 Document 有 indexed field
，那麼寫到兩百萬筆後會越寫越慢，這問題在成熟的 DB 上是沒有的。</p>

<p>我想，這個小例子就說明了 Relational Model 的強大之處及 Document Model 弱的地方，當你要既有的資料新增欄位時， Relational Model 是可以很簡單的增加一個
 column 或 table 就做到，在 MongoDB 上，則是要跳過重重關卡才可以達成。</p>

<p>在軟體需求不穩定時，或常有變更時 Relational Model 對變革的適應能力，較 Document Model 高出許多。</p>

<h2>MongoDB 的長處</h2>

<p>在交換出 <code>ACID</code> 與 <code>對Model 對變革的適應能力</code> 後，我們從 MongoDB 到底換回來了什麼呢？</p>

<ul>
<li>cluster 帶來的更多的儲存空間</li>
<li>cluster 帶來的更 scalable read operation.</li>
<li>在某個資料大小下，一個非常快速的 index</li>
</ul>


<p>前兩個長處就不用多談了，Opensource RDBMS的長處並不在這塊，跟從一開始就要做 cluster 的 MongoDB 是沒得比的，MongoDB 目前已有超過 100 node 的單一 cluster。</p>

<p>第三個先略過不說，等說完結論再回來說</p>

<h2>結論</h2>

<p>我們看完了 Trade-off 後，我們要來思考一下，我們這個交易到底划不划算？</p>

<p>對我來說，我們換出了 ACID 跟 <code>對Model 對變革的適應能力</code> 後，我們換回來的僅僅只有 Scalable storage &amp; scalable read ，
就我看來，這是一筆極差的交易，因為這個換回來的東西大多只能應用在一塊很小的地方，一個需要大量儲空間、一個需要大量讀取能力的應用，而且後者還可以被 cache 所取代。</p>

<p>前面講的 <code>在某個資料大小下，一個非常快速的 index</code> 就是指這個應用範圍， <a href="https://twitter.com/dickwall">Navigenics 的 Dick Wall</a> 就講過，他曾用 MongoDB 用來儲存要配對的 DNA Sequence
，他的資料大小，剛好是大到無法用 Redis 放在記億體中，但是 index 的大小剛好是可以透過 MongoDB 全部放在記億體中，剩餘的資料則是存在硬碟上，就這麼剛好透過
MongoDB ，在下複雜 Query 時，他的搜尋速度可以達到 MySQL 方案的一百倍。</p>

<p>然而，真正 big data 的應用，如 log storage &amp; analysis ，MongoDB 是無法達到對 write operation 的需求的。 MongoDB 能適用的問題空間實在太小，而且既使你目前的需求是在 MongoDB
能達到的範圍內，但需求一變化，就長到 MongoDB 無法承擔的空間去了。</p>

<p>這也是我未來不會採用 MongoDB 的原因，在小量資料時，我會用 PostgreSQL / MySQL ，在資料量大時，會用 Postgres + Cassandra + ElasticSearch</p>

<h2>附注</h2>

<p>既然我說 MongoDB 的這筆交易不是個好交易，那什麼是好交易呢？</p>

<p>我覺得 Cassandra 這個就是個好交易，我們拿 ACID, AdHoc Query 出去換。是的我們把 AdHoc Query 都拿出去換掉了，換回來的是一次只能問兩個問題的 Query ，而且這兩個問題還是在 Table Design 時就要決定的。</p>

<p>但我們換回來的是幾乎無上限的 Read &amp; Write operation 能力 ，在<a href="http://techblog.netflix.com/2011/11/benchmarking-cassandra-scalability-on.html">Netflix 的測試中</a>，Cassandra 單一節點可以有 10,000 rw/sec ，然後一路隨著增加到 288 個節點，每加一個點可以增加 10,000 rw/sec 。</p>

<p>這個才是我說的好交易，因為這個特殊能力，是其它解決方案都辦不到的；雖然說我們交易掉了 ACID &amp; AdHoc Query ，但是透過適當的 Table Design ， Cassandra 的特性剛好可以用來解決 Big Data 中 log storage &amp; analysis
這個大部份人需要解決的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb - Schemaless]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/02/12/mongodb-schemaless/"/>
    <updated>2014-02-12T15:08:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/02/12/mongodb-schemaless</id>
    <content type="html"><![CDATA[<p>我覺得大家對 MongoDB 誤解最大的地方就是 schemaless ， schemaless 應該是個大問題才對，不知道為什麼世人都跟 billg 一樣，把問題當做優點來看。</p>

<h2>Schemaless 的優點</h2>

<p>Schemaless 不是沒有優點的，在搭配上動態語言時， Schemaless 是個很好用的功能，不用設定 mapping configuration ，直接就可以打 <code>item?.some_collections[0]?.city</code> 就這樣一路對一個物件逛下去，不用為了新增一個欄位就要去改 mapping configuration 然後跑 db migration。</p>

<p>然而，這個特點，只有用在有 safe navigation 的動態語言上，才能享受到這些好處，要不然還是處處都要寫 null check ，要不然就會因為讀到前一版的 item 缺少某個欄位，而噴出了 NullPointerException。</p>

<h2>Schemaless 與靜態語言</h2>

<p>在靜態語言中使用 Schemaless DB 時，schemaless 的好處就消失怠盡了，像是我們公司是用 <a href="https://github.com/mongodb/morphia">Morphia</a> 來寫 Model &amp; DAO 的，若是要新增一個欄位，免不了是要去更新 Model class 然後重新 compile &amp; deploy 才能加上一個欄位的。</p>

<p>相較於使用 Schemaful DB ，我們省下的，只有跑 DB Migration 的時間，當然，若是你有個超大的 DB ，那這省下的 off-line maintenance downtime 也可是很驚人的，但是，並不是所有的 db migration 都是要把整個系統下線才能跑的，大多數的 db migration 都是會把系統設計成(對DB)向後相容的，所以不用把整個系統啦下線就可以跑。</p>

<blockquote><p>對DB向後相容的 Application / 向前相容的 Schema ：這邊指的是，先不要更新 Application ，先把 DB Migration 跑完，把資料庫的資料跟Schema更新完後，才把新版的 Application 上線。所以在某段時間內，是舊版的 Application 對著新版的 Schema 在跑的。</p></blockquote>

<h2>Schemaless 的問題</h2>

<p>許多大系統用 Schemaless DB 的原因是因為不想因為跑 DB Migration 把整個系統下線，所以就用 Schemaless 的系統來避開這問題。</p>

<p>但是我想說的是，這誤會可大了，就像前面講的在 Schemaful DB 中，向前相容的 Schema 變動，是不用把系統下線就可以跑的，只有向前不相容的，才要跑 Offline DB Migration 或 Online Data Conversion.</p>

<blockquote><p>Online Data Conversion 指的是，因為前後 Schema 不相容，所以開一個新的 Table 給新版本的物件用，每次讀取一個物件時，先去檢查是否已存在新的 Table 中，若沒有，則是從舊的 Table 讀出來，把格式更新，再存到新的 Table 中。</p>

<p>如此一來，就不用下線也可以把前後格式不相容的的 DB 更新。</p></blockquote>

<p>前文所說的 db migration &amp; online data conversion 就是 schemaless DB 的大問題，除非你是 <strong>神</strong> ，Model 一次就設計好，可以用一輩子，要不然不跑 db migration ，在你的 DB 中，必然會存在著 V1, V2,V3&#8230;Vn 版本的物件。</p>

<p>不跑 db migration ，那就表示你要維護可以對 V1, V2, V3&#8230;.Vn 存取的 Model class ，你可能有一個 db item 一整年沒被讀取到，但是一年後突然用到，你要怎樣保證還讀的回來呢？？</p>

<p>最常見的做法就是，不去 <strong>大幅度</strong> 更新 Model ，削足適屨，既使你知道更新 Model 會讓你未來程式更好寫，但是因為不能去更新 Model ，那就只好去調整程式邏輯，癟腳的用不合適的 Model 來做新工作。</p>

<p>而既使你想跑 db migration ，但是因為 schemaless db 跟本不打算支援 db migration ，所以不會內建任何工具來幫助你，你只能很苦命的自己刻 online data conversion 的工具了。</p>

<h2>後記</h2>

<p>如果你對 DB Migration 的幾種方式有興趣的話，我建議你花一小時，把 Martin Fowler 與 Pramod Sadalage 的 <a href="http://www.se-radio.net/2012/06/episode-186-martin-fowler-and-pramod-sadalage-on-agile-database-development/">Agile Database Development</a> 聽完</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB - Sharding]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/02/12/mongodb-shard-key/"/>
    <updated>2014-02-12T14:27:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/02/12/mongodb-shard-key</id>
    <content type="html"><![CDATA[<p><a class="reference external" href="http://docs.mongodb.org/manual/tutorial/choose-a-shard-key/">Sharding</a> 是一個我非常討厭 MongoDB 的地方，在多台 DB 的解決方案中，免不了要用一個方式來決定那個 object 該放在那台機器上，一個解決方式就是用某個欄位來當 shard key 。</p>
<p>在 MongoDB 中，這個 Shard Key 一決定後就不能改了，然後 MongoDB 會幫你把 object 按 shard key 的值域，平均分配在 n 台機器上。</p>
<p>問題是，平均分派值域並不代表值會是平均非配的，例如 email ，因為姓名是集中在幾個字母上的，所以按值域分派會有 hot spot 產生，a-d 的特別多人，然後 x y z 的沒有人。</p>
<p>在其它的 DB 中，每個 shard 機器所負責的值域是可以讓 dba 去調整的，但 MongoDB 是不行的，所以必然會產生 hot spot 而且你無法去躲開。</p>
<p>有些人會自己去產生 UUID 來當 shard key ，在 MongoDB 2.4 中，則是加入了 hashed shard key 自動幫你把 shard key field 拿去算 hash key 出來當 shard key 用。但是，這還是免不了某些值域是 hot spot 的問題。</p>
<p>既使 MongoDB 能夠平均分派儲存的值域，但是最終我們要看的是，怎麼樣平均分派 read/write operation 。</p>
<p>因為在讀取時，也會發生因為某些原因，讓使用者對某些 object 的存取較其它物件多出 n 倍，所以每個 shard 所負責的值域一定要是 tunable ，要不然遲早一定會出問題。</p>
<p>所以，扔了 MongoDB 吧</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QNAP Sucks]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/01/26/qnap-sucks/"/>
    <updated>2014-01-26T23:08:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/01/26/qnap-sucks</id>
    <content type="html"><![CDATA[<p>是我太多年沒裝機、還是這年頭的機構設計師都是天才？高高興興的把新買的 QNAP TS-212P 打開來，嗯&#8230; 好樣的，竟然沒有說明書。</p>
<p>好吧，就自己硬幹了，開始裝第一顆硬碟，右側索好兩顆螺絲後，換鎖左側，好樣的，孔位對不上！那就鎖一側好了。</p>
<p>先插排線，嗯&#8230;，怎麼 接頭卡到機板身上別的零件了，那這樣不是變成只能插一顆硬碟。2 Bay 的機種只能用一個是怎樣。</p>
<img alt="/images/2014-01-26/qnap-1.png" src="http://blog.yunglinho.com/images/2014-01-26/qnap-1.png" style="width: 800px;" />
<p>算了，先換另一個位子，先開機起來試用再說。</p>
<p>硬碟換到另一個孔位裝好後，再插一次排線 ，嗯，這次接上去了，換插 SATA 排線，嗯，線好短，應該夠長吧。</p>
<p>結果夠長是夠長拉，可是硬拉到那接頭的上下面是反的，所以又不夠長了。</p>
<img alt="/images/2014-01-26/qnap-2.png" src="http://blog.yunglinho.com/images/2014-01-26/qnap-2.png" style="width: 800px;" />
<p>靠，裝個機碰上三個設計問題是怎樣，浪費我時間</p>
<div class="section" id="id1">
<h2>更新：</h2>
<p>經過 Google 大神的指引，原來第一顆硬碟是要插到我卡到的地方去的 Orz&#8230; 第二顆硬碟，硬拉，線是剛剛好夠長的</p>
<p><a class="reference external" href="http://forum.qnap.com/viewtopic.php?f=11&amp;t=87993">http://forum.qnap.com/viewtopic.php?f=11&amp;t=87993</a></p>
<img alt="http://i41.tinypic.com/notyf5.jpg" src="http://i41.tinypic.com/notyf5.jpg" />
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[德國人為什麼強大]]></title>
    <link href="http://blog.yunglinho.com/blog/2014/01/16/make-me-a-german/"/>
    <updated>2014-01-16T14:17:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2014/01/16/make-me-a-german</id>
    <content type="html"><![CDATA[<iframe width="420" height="315" src="http://blog.yunglinho.com//www.youtube.com/embed/9bTKSin4JN4" frameborder="0" allowfullscreen></iframe><p>德國人為什麼強大，沒空看影片的，這邊做個簡述</p>
<ol class="arabic simple">
<li>德國男人 6:20 就起床，八點半上班，工時八小時，內含午餐一小時，下午四點半下班，就可以回家過家庭生活</li>
<li>德國人上班時不可以玩手機 fb ，就是認真幹事，沒有休息或發呆的，有空閒就是主動多抓工作來做。</li>
<li>德國工業還是採學徒制，公司都是做很專門的小事，做到世界第一。雖然沒有明說，但類似日本的終生僱用制，讓員工能夠專心的精進技能。</li>
<li>德國人對穩定的重視高過個人福利，薪資成長跟 CPI 一樣而已，為了成就團隊，個人可以什麼雜事都幹</li>
<li>德國女人在小孩三歲前都是全職家庭主婦，一天花四小時在家政上，剩下來時間花在調教小孩，讓小孩及早養成良好的生活習慣。</li>
<li>德國特有的森林幼稚園，就是把小朋友帶到森林去跟自然環境玩，發揮想像力，自己動手就地取材作玩具。</li>
<li>德國的小朋友上學，八點上課，下午很早就下課，一週有三天是在中午前就結束。</li>
</ol>
<p>我的心德是，日德兩大工業國家果然有很多相似的地方，如勤奮重紀律、終生雇用、職人導向，德國還加上了重視家庭生活( 日本男人沒這麼爽 )，但相反的就是女性沒有什麼自主權。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project-manager-and-product-manager]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/12/15/project-manager-and-product-manager/"/>
    <updated>2013-12-15T19:39:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/12/15/project-manager-and-product-manager</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[矽谷為什麼是矽谷 - 談中小企業放款]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/12/12/small-business-banking-in-silicon-valley/"/>
    <updated>2013-12-12T17:53:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/12/12/small-business-banking-in-silicon-valley</id>
    <content type="html"><![CDATA[<p>自從加入新工作後，對新創公司的體會又多了一些，由其是在行銷找案子上，發覺台美兩地有很大的不同。</p>
<dl class="docutils">
<dt>在這邊，我覺得很大的一塊差異就是在資本市場及資訊流這一塊，銀行的業務有六大塊，除了大家熟悉的幾樣 CB IB 外，有</dt>
<dd><ul class="first last simple">
<li>Retail / Commercial Banking 做一般存放款、房貸業務的</li>
<li>Investment Banking 協助大型公司賣公債或是 IPO 的業務</li>
<li>Merchant banks  銀行的自營商部門</li>
<li>Private Banking 資產管理</li>
<li>Private Equity 銀行自己介入對中小企業經營的單位</li>
<li>Small Business Banking 對中小企業從放款的單位，也是今天要講的重點。</li>
</ul>
</dd>
</dl>
<p>我工作的公司算是 A 輪之前的公司，只有老闆及一些天使投資人投資，資金就放在我們的銀行當中，同時，我們的銀行同時也是我們的投資人之一。</p>
<p>我們許多的合約，是透過我們的銀行拿到的，甚至一些併購案，也是我們銀行仲介來的；我們合作的中小企銀有多放款的對向，為了確保債權回收，所以會當做資訊流通的中介媒介，幫忙介紹一些潛在的客戶給我們。</p>
<p>而我們有幾個併購案，其實是其它跟我們銀行貸款的公司，在撐不下去倒閉時，銀行為了回收債權，所以開始兜售公司資產而找上我們的，銀行把公司的數位資產、商務合約、及人力資源拿來兜售。就這樣，我們用幾成的價錢買下了幾張商務合約。</p>
<p>有趣的是，往往自己的商務合約不夠多，但是多收幾間公司簽下來的合約，湊一湊，反而就可以賺錢了 :)</p>
<div class="section" id="id1">
<h2>信用貸款</h2>
<p>我曾問過台灣的銀行的中小企業企業處，有沒有在經營「企業資訊交流」這一塊，答案是沒有；我猜想原因是台灣這邊銀行不流行信用貸款的因素。</p>
<p>在國外，新創公司是可以靠跟銀行長期的合作，慢慢的累積信用，拿到不少的信用額度，讓公司可以做短期的資金調度，像我前公司就跟銀行有「六百萬美金」的額度可以調動。</p>
<p>對「信用額度」不熟悉的，可以假設你是一間餐廳的老闆，平時就是早上買東西進來晚上賣，賺點微薄的利潤；但是今天碰上過年，休市五天，要增加庫存但沒資金怎麼辦；這時就是可以靠過去跟銀行的往來，靠著信用就跟銀行借資金來週轉。</p>
<p>當然這信用額度不是你可以一次拿太多來用的，若是你一次提領太多，銀行就會把額度收減。</p>
<p>由於這些貸款是信用貸款，所以若是公司倒閉，公司的股東老闆是不用負責承擔的 \(O_O)/~~ 但是為了下次再跟銀行借到錢，公司的老闆在公司倒閉時，也會收尾收的漂亮的；像是幫買下公司資產的公司再工作個半年，讓資產的轉移順利進行。</p>
<p>在台灣就沒有這一回事了，中小企業放款，還是多是要求企業的經營者，用個人資產（房子）做抵押，因為公司的債務受到了保障，自然就沒有放那麼多心力在仲介客戶業務、確保債權能回收之上。</p>
<p>另外台灣多是製造業，只要有機台就可以生產可以搶客戶，商務合約不值錢，所以不能當成公司資產來看。</p>
<div class="section" id="id2">
<h3>題外話</h3>
<p>我猜想美國能有這麼多信用貸款而台灣沒有的一個原因，是因為台灣不是國家，因為台灣無法跟外國遷引渡條約，要是有人用信用貸款弄了幾千萬台幣，人卻跑到中國或美國去，那銀行就無法回收債權了，因此都會要求要用不動產設定抵押</p>
</div>
</div>
<div class="section" id="id3">
<h2>結語</h2>
<p>矽谷就這樣，不只是技術流通的快，商務資訊流通的速度也快，因此，才造就了創業的土壤。</p>
<p>不知道台灣這麼多銀行，那天才會有一家跳下來開始玩「資訊服務產業放款」的這一塊，除了資金外，也做資訊傳播的中間人。</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[經 ARTC 認證之兒童車用座椅清單]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/10/28/artc-certified-car-seat/"/>
    <updated>2013-10-28T00:39:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/10/28/artc-certified-car-seat</id>
    <content type="html"><![CDATA[<ul class="simple">
<li>資料來源：<a class="reference external" href="http://m.artc.org.tw/chinese/03_service/03_search.aspx?nPage=1&amp;pid=2&amp;skeyword=&amp;skeyword2=&amp;skeyword3=">財團法人車輛研究測試中心</a></li>
</ul>
<table border="1" class="docutils">
<colgroup>
<col width="15%" />
<col width="7%" />
<col width="7%" />
<col width="7%" />
<col width="7%" />
<col width="7%" />
<col width="7%" />
<col width="43%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">廠商名稱</th>
<th class="head">通過年份</th>
<th class="head">型號</th>
<th class="head">裝置種類及區分</th>
<th class="head">型式試驗案號</th>
<th class="head">裝置方向</th>
<th class="head">產地</th>
<th class="head">產品圖片</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>谷豐國際有限公司</td>
<td>2012</td>
<td>BL-2035</td>
<td>幼童用座椅S-W3,15-25㎏C-W2,9~18kg</td>
<td>A101ST0017 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>台灣</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_401667646.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_401667646.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>釋采實業有限公司</td>
<td>2012</td>
<td>177</td>
<td>幼童用座椅S-W3,15-25㎏C-W2,9~18kg</td>
<td>A101ST0018 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>台灣</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_402102942.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_402102942.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣愛普力卡股份有限公司</td>
<td>2012</td>
<td>Moving Support 599及Moving Support 575及Moving Support 536</td>
<td>通用型兒童保護裝置，安全帶固定之I,9-18㎏、II,15-25㎏、III,22-36㎏C-W2,9~18kg</td>
<td>A101ST0019 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_402103142.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_402103142.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣愛普力卡股份有限公司</td>
<td>2012</td>
<td>Euro Harness 599</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0006 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397521741.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397521741.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣愛普力卡股份有限公司</td>
<td>2011</td>
<td>Euro Harness</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A100ST0013 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397090050.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397090050.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣愛普力卡股份有限公司</td>
<td>2011</td>
<td>Fladea DX</td>
<td>嬰幼童用座椅C-W1,未滿10kg、C-W2,9~18kgC-W2,9~18kg</td>
<td>A100ST0010 / R51264</td>
<td>前後橫向兼用裝置(不可調傾斜角度，可旋轉角度)</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_372846865.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_372846865.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>好萊兒嬰兒用品有限公司</td>
<td>2011</td>
<td>OMEGA</td>
<td>幼童用座椅C-W1,未滿10kg、C-W2,9~18kgC-W2,9~18kg</td>
<td>A100ST0012 / R51264</td>
<td>前向第4段，後向第5段)</td>
<td>澳洲</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397089843.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397089843.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>好萊兒嬰兒用品有限公司</td>
<td>2011</td>
<td>ROYALE</td>
<td>幼童用座椅C-W1,未滿10kg、C-W2,9~18kgC-W2,9~18kg</td>
<td>A100ST0006 / R51264</td>
<td>前向第4段，後向第5段)</td>
<td>澳洲</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_371900989.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_371900989.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>好萊兒嬰兒用品有限公司</td>
<td>2011</td>
<td>BELINE SP</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A100ST0005 / R51264</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏</td>
<td>法國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_393547913.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_393547913.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>好萊兒嬰兒用品有限公司</td>
<td>2011</td>
<td>BEONE SP</td>
<td>幼童用座椅C-W1,未滿10kgC-W2,9~18kg</td>
<td>A100ST0009 / R51264</td>
<td>不可調傾斜後向裝置</td>
<td>法國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397089636.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397089636.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>好萊兒嬰兒用品有限公司</td>
<td>2011</td>
<td>FB00005</td>
<td>幼童用座椅C-W1,未滿10kgC-W2,9~18kg</td>
<td>A099ST0006 / R51264</td>
<td>後向裝置(不可調傾斜角度)</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_360669218.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_360669218.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>六甲村實業有限公司</td>
<td>2012</td>
<td>&quot;05990（紅）(C-W2/S-W3/S-W4)；05991（綠）(C-W2/S-W3/S-W4)； 05992（紅）(S-W4)；05993（綠）(S-W4)</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A100ST0016 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_402101525.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_402101525.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>永家興實業有限公司</td>
<td>2011</td>
<td>Guardian Pro 2</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A100ST0014 / R51264</td>
<td>9~18㎏可調傾斜前向裝置、15~25㎏、22~36㎏不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_405037744.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_405037744.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>永家興實業有限公司</td>
<td>2011</td>
<td>Relax Pro</td>
<td>幼童用座椅C-W1,未滿10kgC-W2,9~18kg</td>
<td>A100ST0025 / R51264</td>
<td>不可調傾斜後向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_405037987.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_405037987.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>格嘉企業有限公司</td>
<td>2012</td>
<td>Junior Seat</td>
<td>學童用座椅S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0009 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_427207055.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_427207055.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>雅高有限公司</td>
<td>2012</td>
<td>Haenim Baby HN-952</td>
<td>學童用座椅S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0021 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>韓國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_401584418.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_401584418.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>國城童車有限公司</td>
<td>2012</td>
<td>LB517</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0007 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_401668965.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_401668965.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>海風堂企業商行</td>
<td>2012</td>
<td>可愛多感恩</td>
<td>學童用座椅S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0020 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_401669604.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_401669604.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>荷蘭商明居實業有限公司台灣分公司</td>
<td>2011</td>
<td>C0925</td>
<td>幼童用座椅C-W1,未滿10kg、C-W2,9~18kg、學童用座椅,S-W3 15~25㎏C-W2,9~18kg</td>
<td>A100ST0007 / R51264</td>
<td>前後向兼用裝置(可調傾斜角度)</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_371986995.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_371986995.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>荷蘭商明居實業有限公司台灣分公司</td>
<td>2011</td>
<td>C0902B</td>
<td>幼童用座椅C-W1,未滿10kg、C-W2,9~18kgC-W2,9~18kg</td>
<td>A100ST0003 / R51264</td>
<td>前後向兼用裝置(可調傾斜角度)</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_364470060.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_364470060.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣康貝股份有限公司</td>
<td>2011</td>
<td>Joytrip S/EG</td>
<td>幼童用座椅,C-W2 9~18㎏、學童用座椅,S-W3 15~25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A100ST0015 / R51264</td>
<td>不可調傾斜前向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397090242.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397090242.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>台灣康貝股份有限公司</td>
<td>2011</td>
<td>Culet Mieuller TS（First Carry）</td>
<td>幼童用座椅C-W1,未滿10kgC-W2,9~18kg</td>
<td>A100ST0004 / R51264</td>
<td>後向裝置</td>
<td>中國</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_370341473.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_370341473.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>親親貿易有限公司</td>
<td>2012</td>
<td>BC-02</td>
<td>學童用座椅C-W3,15-25㎏、S-W4,22~36㎏C-W2,9~18kg</td>
<td>A101ST0008 / R51264</td>
<td>前後向兼用裝置(可調傾斜角度)</td>
<td>台灣</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_397351257.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_397351257.JPG" style="width: 285px;" />
</td>
</tr>
<tr><td>慶權工業股份有限公司</td>
<td>2011</td>
<td>DS-505A</td>
<td>幼童用座椅,C-W2 9~18㎏C-W2,9~18kg</td>
<td>A100ST0001 / R51264</td>
<td>可調傾斜前向裝置</td>
<td>臺灣</td>
<td><img alt="/images/2013-10-28/tw_fine_caty2_365848761.JPG" class="first last" src="http://blog.yunglinho.com/images/2013-10-28/tw_fine_caty2_365848761.JPG" style="width: 285px;" />
</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我們的政府很有錢啊]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/10/26/island-of-greed/"/>
    <updated>2013-10-26T17:13:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/10/26/island-of-greed</id>
    <content type="html"><![CDATA[<iframe width="420" height="315" src="http://blog.yunglinho.com//www.youtube.com/embed/f6cfO7rAEeM" frameborder="0" allowfullscreen></iframe><p>我們的政府真的很有錢，今年擔任我社區的管委會委員，比較常聽到大樓跟市政府打交道的細節，才知道政府有多浪費。</p>
<p>三年前市政府施工，不知道為什麼，會在我們社區外的電線杆間，遷了一條明線的電線，經過我們的圍牆，三年來有住戶反應要移除，找市議員關切都沒用，都說排修中。</p>
<p>後來管委會發函給市政府，如果在XX日前，市政府不遷走，我們就自己剪線剪掉，市政府才來函說，這條線剪不得，一剪我們幾條街的路燈就不會亮。</p>
<p>故事進入正題；四月時總算開始排隊準備整修，當時管委會想說，六月時，我們這邊要開始路平專案，路平專案後，三年不能挖馬路，不知道排修的事情會不會拖到六月後，變成要再等三年才可以把電線遷走。</p>
<p>沒想到，原來路平專案是假的，這個月，路平專案做完四個月，市政府就來把我們門口的路，兩個禮拜，整條開挖兩次 Orz&#8230;</p>
<p>而且，在六月的路平專案後，九月間隔壁條路也開挖過，有挖到同一個垂直的道路上，所以，一條路就一個月間挖了三次 Orz&#8230;</p>
<p>然候再幾個月，因為排污問題，我們又要再開挖一遍 Orz&#8230;</p>
<p>我們的政府真的很有錢啊～～～</p>
<p>ref: <a class="reference external" href="http://tw.news.yahoo.com/%E5%8F%B0%E5%8C%97%E5%B8%82%E8%B7%AF%E5%B9%B3%E5%B0%88%E6%A1%88%E7%A0%B4%E5%8A%9F-%E8%BF%AA%E5%8C%96%E8%A1%97%E4%B8%89%E5%B9%B4%E6%8C%96188%E6%AC%A1-195527923.html">台北市路平專案破功　迪化街三年挖188次</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[談政府干預怎麼摧毀了台灣的軟體業]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/10/19/government-intervention/"/>
    <updated>2013-10-19T18:27:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/10/19/government-intervention</id>
    <content type="html"><![CDATA[<p>看到今天大家又再吵無薪實習，把前一陣子在 FB 上寫的貼過來</p>
<div id="fb-root"></div> <script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>
<div class="fb-post" data-href="https://www.facebook.com/photo.php?fbid=207806502725706&amp;set=a.123958594443831.22510.123957401110617&amp;type=1" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/photo.php?fbid=207806502725706&amp;set=a.123958594443831.22510.123957401110617&amp;type=1">Post</a> by <a href="https://www.facebook.com/ilove22K">揭露22K</a>.</div></div><div id="fb-root"></div> <script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>
<div class="fb-post" data-href="https://www.facebook.com/shihjieh.hsu/posts/2987682786688" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/shihjieh.hsu/posts/2987682786688">Post</a> by <a href="https://www.facebook.com/shihjieh.hsu">David Hsu</a>.</div></div><p>我舉個台灣軟體業被政府消滅的例子，來讓各位體會到，政府幫企業找人，是件多麼可怕的事。</p>
<p>台灣20年前，台灣有軟體產業，有自製中文系統、排板軟體、繪圖軟體、資料庫等，但是在12,13年前，被國防役制度，把整個軟體產業給摧毀了。</p>
<p>研發替代役，是下一個將摧毀台灣新興產業的政策，朋友問，台灣startup請新鮮人要多少薪水？我直接丟核彈，講：不用想了，因為研發替代役政策，小公司跟本不要想說招的到有能力的新鮮人，因為，有能力的，都去大公司上班當替代役，不能申請替代役的小公司，跟本不用去想招社會新鮮人這個問題。</p>
<p>台灣最近一年研發替代役的名額是 7500 人，約是理工科大學畢業生的一成(目前是碩士才能申請替代役但是明年是大學就可以了)，差不多就是有即戰力的人數。除非是大公司的篩選機制出了漏網之魚，或者是因個人生涯規劃不申請，要不然，大多數的即戰力，就這樣被政府，趕鴨子似的，送給了大企業</p>
<p>而這些大企業是怎麼使用這些人材的呢？既然能把人材綁著四年，年年都有新人進來，所以台灣的產業都把案子弄的很專案導向，能夠在短期內做完就好，沒有人會去想長期性的投資。反正有簡單的路走，為什麼要捨易求難呢？</p>
<p>所以，各家公司就是一堆新人在走，反而不見公司投資在長期的流程改善及工程方法論當中。資深的員工，在台商薪水也上不來，只能逃到外商去。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[談紐約的計程車如何降低乘客及司機間的不信任感]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/09/30/new-york-taxi/"/>
    <updated>2013-09-30T21:41:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/09/30/new-york-taxi</id>
    <content type="html"><![CDATA[<p>既然大家特愛看寫美國的制度，就再多來寫幾篇吧～～</p>
<p>今天老婆去郵局開戶，結果鎩羽而歸，因為老婆是新竹人，嫁到台北後，戶籍不在台北，所以不給在台北開戶，要拿我的證件去證明她是住在台北的，才可以開戶。</p>
<p>郵局人員對這限制也滿反感的，這限制是多年前詐騙盛行、人頭戶盛行，所以金管會下了個命令，禁止在非戶籍地開戶，連台北市內跨區開戶都不行。我是對這政策是非常的不能理解，人頭戶盛行就罰人頭戶罰他賠幾十萬幾百萬算了，台灣現在這樣做，把整個國家的競爭力給賠上去了。</p>
<p>事情的源頭就是，台灣人對弱勢，有莫明沒道理的同情心過剩，認為弱勢做什麼都不該罰，連把個人的資料拿去賣，讓詐騙集團使用，都覺得不該罰。</p>
<p>這一種同情心過剩，衍生到社會的各個層面去，把 <strong>無效率</strong> 、 <strong>守舊</strong> 當做 <strong>社會救助</strong> 的一環去了；前幾天跟同事吃飯時，聊到 Uber 等計程車服務，我講，未來 Uber 將會在第三式世界國家很盛行，因為在這些地區的計程車詐騙盛行，亂叫價亂繞路是常態，對許多來自已開發國家的商務人士很頭痛，若是要減低不確定性，未來商務人士可以直接叫 Uber ，透過 Uber 這個品牌的篩選，幫忙選用較佳的車行，同時，在服務有爭執時，可以調出行車路線圖解決紛爭。</p>
<p>事實上，在這個禮拜，已有某外商銀行的朋友跟我說，他們公司考慮撤掉目前雇用的黑頭車及司機，直接透過 Uber 叫車，減少管理成本及費用的支出。</p>
<p>另外，我也跟同事談到我在 2009 年到紐約機場坐計程車的經驗，在 2009 年時，紐約市的計程車上已經有 GPS / Map 供後座的乘客使用，我從市區坐車要到布魯克林去，透過 GPS 地圖就可以看出來計程車司機有沒有在繞路。</p>
<img alt="/images/2013-09-30/map_on_taxi.jpg" class="align-left" src="http://blog.yunglinho.com/images/2013-09-30/map_on_taxi.jpg" style="width: 800px;" />
<p>另外再早個一兩年，我在紐華克機場叫車到紐澤西的郊區拜訪親戚，在機場的叫車區就有服務人員，一個個的問你要去那裡，然後印出來類似下圖的乘車券，上面會有說你從那裡出發，要到那裡，大約的車資是多少，乘坐的車號是多少。</p>
<p>紐約就是紐約，在制度上還是領先其它地區，對商務旅遊來說，還是有他獨到的地方，同事也說，如果這樣他多付十塊美金買安心也願意。</p>
<img alt="/images/2013-09-30/airport_receipt.jpg" class="align-left" src="http://blog.yunglinho.com/images/2013-09-30/airport_receipt.jpg" style="width: 360px;" />
<img alt="/images/2013-09-30/receipt.jpg" class="align-left" src="http://blog.yunglinho.com/images/2013-09-30/receipt.jpg" style="width: 360px;" />
<p>接著事情就急轉直下了，我接著談到，台灣政府也有在考慮在計程車安裝新的計費表，能夠列印出制式的收據、統一發票，方便商務人士報帳，當然，背後的原因是政府要破產了，所以要擴大徵稅的對像；此時就有另一位同事說，開計程車的都是弱勢怎麼可以跟他們徵稅呢？</p>
<p>我想，這就是台灣目前無法更上一層樓的原因，我們寧願犧牲國家競爭力，把對社會制度的修正跟對弱勢的補助綁在一起，甚至是對弱勢的定意都無法拿捏的清楚 <a class="footnote-reference" href="#id2" id="id1">[1]</a> ，就這樣和稀泥的過了 20 年，就停滯在開發中國家的頂邊，無法邁入已開發國家之列。</p>
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>計程車司機若是能遵守車隊的規範，加入一級的車隊，扣掉費用，收入在四萬以上，高出貧戶補助的標準許多。</td></tr>
</tbody>
</table>
<p>[2] 從計程車看人生 <a class="reference external" href="http://i-chentsai.blogspot.tw/2010/12/blog-post.html">http://i-chentsai.blogspot.tw/2010/12/blog-post.html</a></p>
<p>[3] 圖片來源：<a class="reference external" href="http://www.bridgeandtunnelclub.com/bigmap/citywide/taxi/">http://www.bridgeandtunnelclub.com/bigmap/citywide/taxi/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加州公共事業委員會通過共乘法案]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/09/23/california-legalize-ridesharing/"/>
    <updated>2013-09-23T02:04:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/09/23/california-legalize-ridesharing</id>
    <content type="html"><![CDATA[<p><a class="reference external" href="http://techcrunch.com/2013/09/19/cpuc-ridesharing-regulations/">California Regulator Passes First Ridesharing Rules, A Big Win For Lyft, SideCar, And Uber</a></p>
<p>我把這篇 TechCrunch 的新聞貼在我的 FB 上，反應不佳，所以只好幫他做個中文補述：</p>
<p>因為既有的私人出租車、共乘服務，與既有的加州法規不相容，所以『加州公共事業委員會』在七月提出一個建議案，經過一個半月的討論，在 9/19 通過生效，這種行政單位的效率，是台灣遠遠不及的，才花一個半月就解決一個問題。</p>
<p>Lyft 這種服務的殺傷力很大，以後學生暑假打工又多一個選擇，可以開計程車，或是跑機場接送，別人一趟要 60 ，學生半價就好，然後還可以接到朋友開的 AirBnb etc&#8230;</p>
<p>所以我前一篇才寫 this only happens in California ，再短短的一段時間內，又一個破壞性創新發生了。</p>
<p>如果是社會主義國家如台灣，大概是要炒說乘客的安全誰來保障（乘客都不在乎了，你管那麼多幹麻），出了事誰負責（現在坐計程車車禍，還是健保買單啊，車子也沒保險）？最後，就是長官出來，官僚式的說一聲：「我們再研究，這問題很好，要從長計議&#8230;.」</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[談人力資源主管]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/09/17/on-hr/"/>
    <updated>2013-09-17T11:13:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/09/17/on-hr</id>
    <content type="html"><![CDATA[<div id="fb-root"></div> <script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>
<div class="fb-post" data-href="https://www.facebook.com/samlu128/posts/4693698999344" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/samlu128/posts/4693698999344">Post</a> by <a href="https://www.facebook.com/samlu128">Sam Lu</a>.</div></div><p>台灣 HR 的心態再不改，台灣一定完蛋，前陣子跟美國的朋友聊到台美之間 HR 的差別，我說，台灣的 HR 像買菜一樣，樣樣挑錯批評，想辦法用最便宜的價錢把人請進來，既使激怒你也沒關係；美國的 HR 比較像是服務業，雖然也是一開始丟個較低的數字，但然是想盡辦法僅量滿足你的需求，讓你高高興興的進來。</p>
<p>我到台灣某最大網路公司面試時， HR 問我薪資要求，我說了一個數字，對方直接回『不可能』三個字（最後我在外面兩間公司拿到一樣的數字），也沒問說薪水之外有什麼其它要求的。</p>
<p>我在美國的某百人公司，在談的時候，薪水較我前一份工作有減少，但是，我問他公司的年假的數量可不可以多幾天，因為我一年要回台灣一趟，就這樣，一進去公司就幫我加了18天的假可以用，雖然薪水有少，但滿足了我的要求，所以也不覺得有委屈到。</p>
<p>台灣的 HR 處處都講「制度」，挑人時再用個模板套在你身上，對不合的地方東挑西撿，完全忽視掉人性的差異跟大家需求的差異，如果 HR 是這樣當的，那乾脆找台電腦來當 HR 就好啦～</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是政治還是不是政治？]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/09/12/politics-or-not-politics/"/>
    <updated>2013-09-12T22:52:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/09/12/politics-or-not-politics</id>
    <content type="html"><![CDATA[<p>這幾天關說很熱門，所以我想來談談什麼是「美國式的關說」</p>
<p>我第一次學到什麼叫「美國式的關說」是在 <a class="reference external" href="http://www.amazon.com/Liars-Poker-Rising-Through-Wreckage/dp/0739357301">Liar&#8217;s Poker</a> 中學到的，這本書有一大半是在講房地產證券化的歷史的，在 1983 年房地產證券化之前，美國的房貸因為都是要跟當地銀行借的，而當地銀行手中的投資標地無法多樣化分散系統風險，因此房貸的利率很高，借款條件也高。</p>
<p>而 Salomon Brothers 的 Lewis S. Ranieri 發明了房地產證券化 Mortgage-Backed Securities ，讓銀行能將手中的房地產債券重新包裝起來銷售，把風險轉價出去，自此，美國的房貸利率大降，許多的家庭都能負擔的起自己房產。（至於25年後發生的房地產泡沫化才是後話了）</p>
<p>一個數千億的交易市場就被創造出來， Salomon Brothers 最早投入，所以佔有七成的交易額，而發明 MBS 的 Lewis S. Ranieri 則領到了三億美金的獎金。（數字可能有記錯，但是是用億來算沒錯）</p>
<div class="section" id="id1">
<h2>關說</h2>
<p>那這跟我要講的「關說」有什麼關系呢？這關係可大了，因為一個商業模式的發明，他不一定與既有的法規相容，所以要透過修改法規，才能夠讓一個商業模式運行下去。</p>
<p>但要修改法規，必須要有數位立委主導，並有全體立委的半數投票同意才能通過；但是立委手上工作繁多，為什麼要幫你先做呢？因此，就需要透過「關說」，利用金錢或其它的誘因，讓立委將提案的優先順序提高。</p>
<p><strong>這邊，會有兩個問題出現</strong></p>
<p>第一個問題是，提出新法規的人，由於資訊的優先取得，必然在商業競爭中取到極大的優勢，事先布局好在法規一通過，在對手還搞不清楚狀況之下，就搶佔市場，如上文說的 Salomon Brothers</p>
<p>第二個問題是，既使新的商業模式是有利的，但是對既有的競爭者是不利的，那政府是否能該修改遊戲規則，去偏好某一方呢？</p>
<p>這兩個問題的答案，就我從經濟法學的角度來看，一個新的商業模式，若是能增加全民的福祇，那麼政府本來就應當去推動，至於發明新經濟模式的，我們本該獎勵創新，所以，沒有什麼問題才對。</p>
<p>在美國「關說」是一個非常合理的政治手段，只是有一個附加條件，就是關說的內容及政治獻金的金額，必須公開。</p>
</div>
<div class="section" id="id2">
<h2>台灣的狀況</h2>
<p>過去幾年我曾問過幾個朋友「如果某人發明一個新的商業模式，透過關說推動法律變革，讓全民及自己得利，你覺得合不合理？」</p>
<p>非常可惜的是，我得到的答案都是負面的，覺得「關說是不對的」、「法規該是公正不變動的」</p>
<p>或許，這也就是台灣社會目前停滯在「開發中國家」這階段的原因之一吧；一個缺乏變革動力的國家，自然是不可能趕上或併肩走在其它已開國家身旁的。</p>
</div>
<div class="section" id="id3">
<h2>美國的偉大之處</h2>
<p>在這邊我要先岔題講一下，台灣及美國在變革上的差別。</p>
<p>在台灣，一個新的服務或法規變革，其細節往往是官大學問大，在一兩個官員的小圈圈中就決定的，由於台灣是落後國家，所以有可以抄襲的對像，所以，往往結果還算可以。</p>
<p>但是大家可以想看看，歐美這些國家，是等於一個探險家，在黑暗中獨自前行；那麼先進國家是怎麼樣在黑暗中摸索成功的呢？</p>
<p>這一點，就不得不歸功於美國開國先烈的「美妙的意外」，將一個美國劃分成五十個州，在各州允許有自己的自治法規，將美國這國家，變成全世界最大的一個 AB Test</p>
<p>當一個問題出現時，美國不會有一個明君，像是被雷打到一樣，天知到他怎麼知道什麼是最好的，就把法規給定了下來。美國反而是各州會有不同的法規，經過十年的運行，累積了許多的資料後，讓經濟學家去研究，到底，這五十個州的法規，那一個較好，然後大家把這問題解決後，就往下一個問題去處理。</p>
<p>就這樣，一個「美妙的意外」，讓美國透過聯邦制度，成為世上最創新的國家。</p>
</div>
<div class="section" id="id4">
<h2>是政治還是不是政治？</h2>
<p>回到原題「是政治還不是政治？」我記得在我念大二 1998 年的時候，台灣就開始談「小額付款」的工具，但是台灣一直到 2009「電子票證發行管理條例」通過，台灣才真正能透過儲值的方式來作小額付款。</p>
<p>但其實 2002 年電子票券法就已經躺在立法院了，只是一直到 2009 年某個明星要從政，所屬政黨要把功勞做給他，所以才把電子票券法給通過，若不是這樣，大家可能還在苦等小額付款的工具。</p>
<p>而這一段歷史，也就是台灣發展的困境，在台灣新的商業模式要去修改法規，必定要透過找門神的方式，才能夠推動法規的變革；有時萬事具備只欠東風，但是那個可以領功的門神偏偏年紀還太小，不適合太早出世，那麼眾生也只有苦等七年的份。</p>
<p>在過去的幾年間，美國透過修改法規，出現了 Square ，加州通過了「無人架駛車輛標準」，而 Uber 還在跟許多州溝通中，要去修改出租車的法規。</p>
<p>反觀台灣，類似 AirBnB 的民宿及短租公寓的需求已經出現，但是政府還是只會一昧的禁止，拒絕跟沒有門神背景的業者對談。</p>
<p>許多人覺得我常講政治，但是對創業家來說，要麻就是避走他鄉或是不碰利潤最大的這一塊，要不然必然還是要碰上走「關說」、「碰政治」這一條路的</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美國出差行]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/09/12/us-trip/"/>
    <updated>2013-09-12T21:24:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/09/12/us-trip</id>
    <content type="html"><![CDATA[<p>八月底到美國出差了兩個多禮拜，算起來，這是我自 2010 年搬回台灣後，第二次造訪美國；前一次是 2012 年 10 月出差到 San Jose ，這次則是到 San Francisco ，兩次造訪，這一次的震憾較上一次強烈許多。</p>
<p>當年離美時就很清楚知道，離開三年後就會跟美國的商業環境開始脫節，但是親身經歷起來，還是有不少的感嘆，2008年金融風暴開始，房價爆跌、民間消費銳減、許多企業開始裁減支出，許多的商業計劃都被裁轍，美國的經濟陷入一段蕭條期。</p>
<div class="section" id="tesla">
<h2>Tesla</h2>
<p>這一次來美國，見到了許多美國在這一段時間做出的變化；最大的特色還是鋼鐵人的公司 Tesla</p>
<img alt="http://www.teslamotors.com/sites/all/themes/tesla/homepage/images/hero_20130823.jpg?20130826" src="http://www.teslamotors.com/sites/all/themes/tesla/homepage/images/hero_20130823.jpg?20130826" style="width: 800px;" />
<p>Tesla 在前一年推出 Model S 後，雖然售價仍是高達七萬美金，但是銷售量大增，2013上半年就賣了 12,700 台，其中有 4,713 台是在加州賣掉；舊金山街頭處處可以看到 Tesla 的身影，連我去商店買東西跟老闆聊天，她也說她先生才剛買一台；在不遠的未來， Tesla 將是美國及加州經濟的一大推手。</p>
</div>
<div class="section" id="square">
<h2>第二變化則是 Square</h2>
<img alt="/images/2013-09-12/square-stand.jpg" src="http://blog.yunglinho.com/images/2013-09-12/square-stand.jpg" style="width: 800px;" />
<p>Square 解決了兩個問題，第一個是過去在申請信用卡刷卡機時，需要遷有電話線，造成行動性不佳，許多的街頭攤販在無法使用信用卡付款的方式下，只能消售價格較低的產品，但是在 Square 出現後，這問題就迎刃而解；只要可以行動上網就可以接受信用卡付款，讓銷售行為更有便利性。</p>
<p>Square 解決的第二個問題是 POS 系統的問題， Square 內建一個簡單的 POS 系統，可以讓你製作簡單的產品型錄、購物車及結帳，透過 Square 小型商家不用多花經費外包，就可以有一個 store front 可以用。</p>
<p>在某一個週五下班後，我跟同事到一個 <a class="reference external" href="http://www.bluxomewinery.com/">倉庫</a> 去參加品酒會，現場的酒商，就是用 Square 來當 POS 系統，當場的試喝或者是買幾瓶幾箱回去，都可以在 Square 上完成，不用擔心是因為臨時性的場地無法做大金額的銷售。</p>
</div>
<div class="section" id="id1">
<h2>第三個變化是穿戴性配備</h2>
<p>從 2012 起 <strong>硬體文藝復興</strong> <a class="reference external" href="http://www.paulgraham.com/hw.html">Hardware Renaissance</a> 開始成為一個熱門的話題，成為創投開始關注的下一個目標，硬體及 IC 設計代工產業，讓開發硬體設備的成本越來越低，讓各種小型專案（在 Kickstarter) 開始盛行，其中大家最關注的一個方向就是穿戴性設備。</p>
<p>美國創業土壤良好的一個因素，就是美國的消費者對新事物的接受度很高，在我們美國辦公室內，七個人就有三個人買了 <a class="reference external" href="https://jawbone.com/up">Jawbone Up</a> ，我們 CEO 還買了另一家的產品來用，讓愛嘗鮮的我也買了一支來試用。</p>
<p>在舊金山的市區的 Apple Store ，有一整個櫃子在賣穿戴性設備，有 <a class="reference external" href="https://jawbone.com/up">Jawbone Up</a> <a class="reference external" href="http://www.fitbit.com/one">Fitbit One</a> <a class="reference external" href="http://www.nike.com/cdp/fuelband/us/en_us/">Nike Fuel Band</a> 等產品，其中 Up 還賣到斷貨，許多人都在問要何時在有適合的尺寸跟顏色進來。</p>
<img alt="/images/2013-09-12/up.png" class="align-left" src="http://blog.yunglinho.com/images/2013-09-12/up.png" style="width: 180px;" />
<img alt="/images/2013-09-12/fitbit.png" class="align-left" src="http://blog.yunglinho.com/images/2013-09-12/fitbit.png" style="width: 180px;" />
<img alt="/images/2013-09-12/fitbit_one.jpg" class="align-left" src="http://blog.yunglinho.com/images/2013-09-12/fitbit_one.jpg" style="width: 180px;" />
<img alt="/images/2013-09-12/fuelband.png" class="align-left" src="http://blog.yunglinho.com/images/2013-09-12/fuelband.png" style="width: 180px;" />
</div>
<div class="section" id="uber">
<h2>第四個變化是 Uber</h2>
<p>在台灣我們習慣使用電話叫車，但是美國已經變成使用手機叫車，在手機選好車種，叫車到特定地點，上車，下車時也不用再掏錢付款，直接在 Uber 結帳；與傳統的叫車攔車相比，又是更方便快速一些。</p>
</div>
<div class="section" id="id2">
<h2>感想</h2>
<p>美國在經歷 2008 年的房地產金融泡沫後，已經從衰退中，找到許多新的商業模式站起來，Tesla無疑的將對汽車製造業有市場重劃的影響。Google 的無人車計劃更是將把對個交通產業翻過來，未來個人不用擁有汽車，要用車，直接在手機上叫車，車輛自己開來你家接你，把你載到某個地點後，自己會再去找下一個客人，或者去找地方充電；在駕駛上，因為車輛可以互相溝通，所以在高速公路上可以保持非常近的安全距離，帶頭的第一台車要煞車時，同時也將電子訊號送給後面的車輛立即煞車，可以把道路空間更有效的利用。</p>
<p>在電子製造業於美國無利可途的環境下，美國的消費產業，善用消費者及製造端的特性，開發出一樣又一樣的試驗型產品，雖然目前的穿戴式設備仍有電力及資料傳輸便利性的問題，但消費者、生產者及資本市場，仍不吝於給與嘗試的機會。</p>
<p>Square, Uber 等電子化消費工具，將交易的成本降低，讓金錢的流通更迅速，加強美國在商業環境上的競爭力。在工業上，因為油頁岩探堪技術的突破，美國煉鋼成本大降，未來成為汽車等製造業成本最低的國家。</p>
<p>在短短的五年間，美國就脫胎換骨，找到未來十年發展的發產潛力；反觀台灣，在過去幾年間，仍是以炒作房地產為主，家庭收入六成都卡在房貸上，民間消費全部停下來，百貨業今年的銷售額只有前一年的六成。</p>
<p>在 2000, 2005, 2008 年就該被逃汰的 DRAM LCD WiMAX 產業，在政府的補助下，仍茍延殘喘，無法將勞動力釋出，產業結構仍是停留在 1990 年代的 <em>高人力成本</em> 的製造業為主。</p>
<p>美國的產業轉型從 2008 年就開始了，台灣在過去五年內仍是炒房，目前台北市的房價已經跟曼哈頓島上一樣貴了，天龍國大安區信義區，價錢更是高到紐約中央公園第一排的水準；日前，台灣又開放保險業投資房地產的資金比率，再次幫房地產增加上漲的動力，有機會再漲兩年。</p>
<p>三年前 31 歲的我，覺得能在台灣跟台灣一起面對經濟轉型，沒想到台灣沒有轉型，反而是要再拖至少兩年才能改革，而且是要走「日本失落的二十年」模式，而非美國的模式；已經不年輕的我，還有機會再等下去嗎？想來就悲哀</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[parallel external merge sort]]></title>
    <link href="http://blog.yunglinho.com/blog/2013/03/19/parallel-external-merge-sort/"/>
    <updated>2013-03-19T21:43:00+08:00</updated>
    <id>http://blog.yunglinho.com/blog/2013/03/19/parallel-external-merge-sort</id>
    <content type="html"><![CDATA[<p>Last week, I was working on importing a large input file into the system. Part of the process involved with
reading a large file (~10GB) from remote server and them sort the inputs locally.</p>
<p>At that moment, I decided to give Scala&#8217;s new <a class="reference external" href="http://docs.scala-lang.org/sips/pending/futures-promises.html">Future API</a> a try. Within one day, I wrote a parallel external
merge sort that can</p>
<blockquote>
<ol class="arabic simple">
<li>Read the file from remote server and split it into smaller chunks.</li>
<li>Use in-memory quicksort to sort each chunk and then save chunks into files.</li>
<li>Perform merge sort on the files generated in the previous step.</li>
</ol>
</blockquote>
<p>The most amazing thing is that multiple threads could work on these tasks simultanously. While one thread is busy
reading bytes from remote server, other threads would perform quicksort on the part that has already been read. Once,
all of the data has been written to file system. Another thread will start to merge sort these files.</p>
<p>Here is how I do it.</p>
<div class="section" id="read-lines-from-inputstream">
<h2>Read Lines From InputStream</h2>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">soure</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">inputStream</span><span class="o">).</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure><p>The above code will turn a <strong>InputStream</strong> into a <strong>Stream[Int]</strong> , and then allow us to perform operation on it
without having to fully read it into memory first. But still, this is a huge Stream. Because we are going to use
in-memory sort, I need to split it into smaller pieces first.</p>
<p>The following code will <strong>lift</strong> a Stream into a Stream of Stream. Again, this operation does not require read the whole
original stream into memory. All the operation only happens logically.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Lift a Stream into a Stream of Stream. The size of each sub-stream is specified by the chunkSize</span>
</span><span class="line"><span class="cm"> * @param stream        the origin stream.</span>
</span><span class="line"><span class="cm"> * @param chunkSize     the size of each substream</span>
</span><span class="line"><span class="cm"> * @tparam A</span>
</span><span class="line"><span class="cm"> * @return              chunked stream of the original stream.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">def</span> <span class="n">lift</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">stream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">remaining</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">remaining</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="nc">Stream</span><span class="o">.</span><span class="n">empty</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">)</span> <span class="k">=</span> <span class="n">remaining</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line">      <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">val</span> <span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">)</span> <span class="k">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="perform-quick-sort">
<h2>Perform Quick Sort</h2>
<p>After we have split <strong>InputStream</strong> into <strong>Streams</strong>, we can start to read each sub-stream into memory and perform
quicksort on them.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">linesStream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">lift</span><span class="o">(</span><span class="n">soure</span><span class="o">,</span> <span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">chunkCounter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">sortedFileDir</span> <span class="k">=</span> <span class="nc">Files</span><span class="o">.</span><span class="n">createTempDir</span><span class="o">()</span>
</span><span class="line"><span class="n">sortedFileDir</span><span class="o">.</span><span class="n">deleteOnExit</span><span class="o">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">// read source stream, read n entries into memory and save it to file in parallel.</span>
</span><span class="line"><span class="k">val</span> <span class="n">fileFutures</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">File</span><span class="o">]]</span> <span class="k">=</span> <span class="n">linesStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span>
</span><span class="line">  <span class="n">s</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">chunk</span> <span class="k">=</span> <span class="n">chunkCounter</span><span class="o">.</span><span class="n">getAndIncrement</span>
</span><span class="line">    <span class="nc">Future</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">sorted</span> <span class="k">=</span> <span class="n">s</span><span class="o">.</span><span class="n">sorted</span>
</span><span class="line">      <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">sortedFileDir</span><span class="o">,</span> <span class="s">&quot;%d&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">chunk</span> <span class="o">*</span> <span class="n">chunkSize</span><span class="o">))</span>
</span><span class="line">      <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">ret</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">      <span class="k">try</span> <span class="o">{</span>
</span><span class="line">        <span class="n">sorted</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="n">ret</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}).</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="perform-merge-sort">
<h2>Perform Merge Sort</h2>
<p>Because I want to perform mergesort on all of results, I have to turn <strong>List[Future[File]]</strong> into <strong>Future[List[File]]</strong>
first. So that I can instruct the <strong>Future</strong> to do merge sort once it has all the pieces.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">saveTmpFiles</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">File</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">fileFutures</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">ret</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">File</span><span class="o">]</span> <span class="k">=</span> <span class="n">saveTmpFiles</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">    <span class="n">files</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">  <span class="k">var</span> <span class="n">merged</span> <span class="k">=</span> <span class="n">files</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">splited</span> <span class="k">=</span> <span class="n">merged</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span>
</span><span class="line">    <span class="k">val</span> <span class="n">tuple</span> <span class="k">=</span> <span class="n">splited</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">splited</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">m2</span> <span class="k">=</span> <span class="n">tuple</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="o">(</span><span class="n">f1</span><span class="o">,</span> <span class="n">f2</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">sortedFileDir</span><span class="o">,</span> <span class="n">f1</span><span class="o">.</span><span class="n">getName</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">f2</span><span class="o">.</span><span class="n">getName</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">val</span> <span class="n">source1</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">f1</span><span class="o">)</span>
</span><span class="line">        <span class="k">val</span> <span class="n">source2</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">f2</span><span class="o">)</span>
</span><span class="line">        <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">ret</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">          <span class="k">val</span> <span class="n">stream1</span> <span class="k">=</span> <span class="n">source1</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class="line">          <span class="k">val</span> <span class="n">stream2</span> <span class="k">=</span> <span class="n">source2</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class="line">          <span class="n">merge</span><span class="o">(</span><span class="n">stream1</span><span class="o">,</span> <span class="n">stream2</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class="line">          <span class="n">ret</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">          <span class="n">out</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">          <span class="n">source1</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">          <span class="n">source2</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">          <span class="nc">FileUtils</span><span class="o">.</span><span class="n">deleteQuietly</span><span class="o">(</span><span class="n">f1</span><span class="o">)</span>
</span><span class="line">          <span class="nc">FileUtils</span><span class="o">.</span><span class="n">deleteQuietly</span><span class="o">(</span><span class="n">f2</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="n">merged</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">m2</span> <span class="o">:+</span> <span class="n">merged</span><span class="o">.</span><span class="n">last</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="n">m2</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">merged</span><span class="o">.</span><span class="n">head</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Merge two streams into one stream.</span>
</span><span class="line"><span class="cm"> * @param streamA</span>
</span><span class="line"><span class="cm"> * @param streamB</span>
</span><span class="line"><span class="cm"> * @return</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">def</span> <span class="n">merge</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">streamA</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">streamB</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ord</span><span class="k">:</span> <span class="kt">Ordering</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="o">(</span><span class="n">streamA</span><span class="o">,</span> <span class="n">streamB</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">,</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">b</span>
</span><span class="line">    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="n">streamA</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">      <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="n">streamB</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">ord</span><span class="o">.</span><span class="n">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">merge</span><span class="o">(</span><span class="n">streamA</span><span class="o">.</span><span class="n">tail</span><span class="o">,</span> <span class="n">streamB</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">merge</span><span class="o">(</span><span class="n">streamA</span><span class="o">,</span> <span class="n">streamB</span><span class="o">.</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="give-this-method-a-pretty-face">
<h2>Give this Method a Pretty Face.</h2>
<p>So how does the method signature of this parallel external merge sort look like?</p>
<p>In fact, it is quite simple. It takes an <strong>InputStream</strong> and returns a <strong>Future[File]</strong>. So that, everything
happens asynchronously, nothing blocks the main thread. You can send an inputStream to this method, go to do other
things first and then come back to wait for the result.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">sort</span><span class="o">(</span><span class="n">inputStream</span><span class="k">:</span> <span class="kt">InputStream</span><span class="o">,</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2000000</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">File</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="limits-number-of-threads-running-at-the-same-time">
<h2>Limits Number of Threads Running at the Same Time.</h2>
<p>Because this parallel external mergesort is an IO and memory intense operations, we can not run too many of it
simultaneously. We must put a constraint on the number of threads it can use at a time. Otherwise, we may receive
OutOfMemoryError or having many threads writing to disk simultaneously.</p>
<p>Also, this constraint must be a global constraint. No matter how many requests has been sent to this method at the
same time, it should only use up-to <em>N</em> threads.</p>
<p>Luckly, this is quite easy to do with Scala&#8217;s Future API. All we need to do is to provide a fixed size thread pool
for this method. So that it won&#8217;t spawn new thread by itself, instead, it uses threads provided by this global thread
pool.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * limits number of reading and sorting can be executed simultaneously. Because this is an IO</span>
</span><span class="line"><span class="cm"> * bound operation, unless the inputstream is coming from a slow http connection, otherwise, 5</span>
</span><span class="line"><span class="cm"> * is more than enough.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">val</span> <span class="nc">GLOBAL_THREAD_LIMIT</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="n">getRuntime</span><span class="o">.</span><span class="n">availableProcessors</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="mi">5</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="n">ret</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span> <span class="k">lazy</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">executionContext</span> <span class="k">=</span>
</span><span class="line">  <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutorService</span><span class="o">(</span><span class="nc">Executors</span><span class="o">.</span><span class="n">newFixedThreadPool</span><span class="o">(</span><span class="nc">GLOBAL_THREAD_LIMIT</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="put-everything-alltogether">
<h2>Put Everything Alltogether</h2>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">com.google.common.io.Files</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.io.</span><span class="o">{</span><span class="nc">PrintWriter</span><span class="o">,</span> <span class="nc">File</span><span class="o">,</span> <span class="nc">InputStream</span><span class="o">}</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.util.concurrent.Executors</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">org.apache.commons.io.FileUtils</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">ExecutionContext</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.io.Source</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">InputStreams</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * limits number of reading and sorting can be executed simultaneously. Because</span>
</span><span class="line"><span class="cm"> * this is an IO bound operation, unless the inputstream is coming from a slow</span>
</span><span class="line"><span class="cm"> * http connection, otherwise, 5 is more than enough.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">val</span> <span class="nc">GLOBAL_THREAD_LIMIT</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="n">getRuntime</span><span class="o">.</span><span class="n">availableProcessors</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="mi">5</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="n">ret</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span> <span class="k">lazy</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">executionContext</span> <span class="k">=</span>
</span><span class="line">  <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutorService</span><span class="o">(</span><span class="nc">Executors</span><span class="o">.</span><span class="n">newFixedThreadPool</span><span class="o">(</span><span class="nc">GLOBAL_THREAD_LIMIT</span><span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">sort</span><span class="o">(</span><span class="n">inputStream</span><span class="k">:</span> <span class="kt">InputStream</span><span class="o">,</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2000000</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">File</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// open source stream</span>
</span><span class="line">  <span class="k">val</span> <span class="n">soure</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromInputStream</span><span class="o">(</span><span class="n">inputStream</span><span class="o">).</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="n">linesStream</span> <span class="k">=</span> <span class="n">lift</span><span class="o">(</span><span class="n">soure</span><span class="o">,</span> <span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="n">chunkCounter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">sortedFileDir</span> <span class="k">=</span> <span class="nc">Files</span><span class="o">.</span><span class="n">createTempDir</span><span class="o">()</span>
</span><span class="line">  <span class="n">sortedFileDir</span><span class="o">.</span><span class="n">deleteOnExit</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// read source stream, read n entries into memory and save it to file in parallel.</span>
</span><span class="line">  <span class="k">val</span> <span class="n">saveTmpFiles</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">File</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span>
</span><span class="line">    <span class="n">linesStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">s</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">chunk</span> <span class="k">=</span> <span class="n">chunkCounter</span><span class="o">.</span><span class="n">getAndIncrement</span>
</span><span class="line">      <span class="nc">Future</span> <span class="o">{</span>
</span><span class="line">        <span class="k">val</span> <span class="n">sorted</span> <span class="k">=</span> <span class="n">s</span><span class="o">.</span><span class="n">sorted</span>
</span><span class="line">        <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">sortedFileDir</span><span class="o">,</span> <span class="s">&quot;%d&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">chunk</span> <span class="o">*</span> <span class="n">chunkSize</span><span class="o">))</span>
</span><span class="line">        <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">ret</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">          <span class="n">sorted</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">          <span class="n">out</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">ret</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}).</span><span class="n">toList</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// perform merge sort.</span>
</span><span class="line">  <span class="n">saveTmpFiles</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">    <span class="n">files</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">      <span class="k">var</span> <span class="n">merged</span> <span class="k">=</span> <span class="n">files</span>
</span><span class="line">      <span class="k">while</span> <span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">val</span> <span class="n">splited</span> <span class="k">=</span> <span class="n">merged</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span>
</span><span class="line">        <span class="k">val</span> <span class="n">tuple</span> <span class="k">=</span> <span class="n">splited</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">splited</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">val</span> <span class="n">m2</span> <span class="k">=</span> <span class="n">tuple</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">          <span class="k">case</span> <span class="o">(</span><span class="n">f1</span><span class="o">,</span> <span class="n">f2</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">            <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">sortedFileDir</span><span class="o">,</span> <span class="n">f1</span><span class="o">.</span><span class="n">getName</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">f2</span><span class="o">.</span><span class="n">getName</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">            <span class="k">val</span> <span class="n">source1</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">f1</span><span class="o">)</span>
</span><span class="line">            <span class="k">val</span> <span class="n">source2</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">f2</span><span class="o">)</span>
</span><span class="line">            <span class="k">val</span> <span class="n">out</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">ret</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">              <span class="k">val</span> <span class="n">stream1</span> <span class="k">=</span> <span class="n">source1</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class="line">              <span class="k">val</span> <span class="n">stream2</span> <span class="k">=</span> <span class="n">source2</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">toStream</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class="line">              <span class="n">merge</span><span class="o">(</span><span class="n">stream1</span><span class="o">,</span> <span class="n">stream2</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class="line">              <span class="n">ret</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">              <span class="n">out</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">              <span class="n">source1</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">              <span class="n">source2</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">              <span class="nc">FileUtils</span><span class="o">.</span><span class="n">deleteQuietly</span><span class="o">(</span><span class="n">f1</span><span class="o">)</span>
</span><span class="line">              <span class="nc">FileUtils</span><span class="o">.</span><span class="n">deleteQuietly</span><span class="o">(</span><span class="n">f2</span><span class="o">)</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">          <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">merged</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="n">m2</span> <span class="o">:+</span> <span class="n">merged</span><span class="o">.</span><span class="n">last</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">          <span class="n">m2</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="n">merged</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Lift a Stream into a Stream of Stream. The size of each sub-stream is specified</span>
</span><span class="line"><span class="cm"> * by the chunkSize.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @param stream        the origin stream.</span>
</span><span class="line"><span class="cm"> * @param chunkSize     the size of each substream</span>
</span><span class="line"><span class="cm"> * @tparam A</span>
</span><span class="line"><span class="cm"> * @return              chunked stream of the original stream.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">def</span> <span class="n">lift</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">stream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">remaining</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">remaining</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="nc">Stream</span><span class="o">.</span><span class="n">empty</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">)</span> <span class="k">=</span> <span class="n">remaining</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line">      <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">val</span> <span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">)</span> <span class="k">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">splitAt</span><span class="o">(</span><span class="n">chunkSize</span><span class="o">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">tailFn</span><span class="o">(</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Merge two streams into one stream.</span>
</span><span class="line"><span class="cm"> * @param streamA</span>
</span><span class="line"><span class="cm"> * @param streamB</span>
</span><span class="line"><span class="cm"> * @return</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">private</span> <span class="k">def</span> <span class="n">merge</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">streamA</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">streamB</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ord</span><span class="k">:</span> <span class="kt">Ordering</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="o">(</span><span class="n">streamA</span><span class="o">,</span> <span class="n">streamB</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">,</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span>
</span><span class="line">    <span class="k">case</span> <span class="o">(</span><span class="nc">Stream</span><span class="o">.</span><span class="nc">Empty</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">b</span>
</span><span class="line">    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="n">streamA</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">      <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="n">streamB</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">ord</span><span class="o">.</span><span class="n">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">merge</span><span class="o">(</span><span class="n">streamA</span><span class="o">.</span><span class="n">tail</span><span class="o">,</span> <span class="n">streamB</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Stream</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">merge</span><span class="o">(</span><span class="n">streamA</span><span class="o">,</span> <span class="n">streamB</span><span class="o">.</span><span class="n">tail</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></div>

]]></content>
  </entry>
  
</feed>
